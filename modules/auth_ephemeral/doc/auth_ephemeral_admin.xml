<?xml version="1.0" encoding='ISO-8859-1'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

<!-- Include general documentation entities -->
<!ENTITY % docentities SYSTEM "../../../docbook/entities.xml">
%docentities;

]>

<!-- Auth_ephemeral Module User's Guide -->

<chapter>
	
	<title>&adminguide;</title>
	
	<section>
	<title>Overview</title>
	<para>
	This module contains all authentication related functions that can work
	with ephemeral credentials. This module should be used together with the
	auth module - it cannot be used independently because it depends on the
	auth module. Use this module if you want to use ephemeral credentials
	instead of ordinary usernames and passwords.
	</para>

	<section>
	<title>How ephemeral credentials work</title>
	<para>
	Ephemeral credentials are generated by a web-service and enforced on
	Kamailio. This usage of ephemeral credentials ensures that access to
	Kamailio is controlled even if the credentials cannot be kept secret,
	as can be the case in WebRTC where the credentials may be specified in
	Javascript.
	</para>
	<para>
	To use this mechanism, the only interaction needed between the
	web-service and Kamailio is to share a secret key.
	</para>
	<para>
	Typically, credentials will be requested from the web-service using an
	HTTP GET and provided in a JSON response. To prevent unauthorised use
	the HTTP requests can be ACLd by various means.
	</para>
	<para>
	This mechanism is based on the Google proposal for a &quot;TURN Server
	REST API&quot;.
	</para>
	<section>
	<title>Request</title>
	<para>
	The request should contain the following parameters:
	<itemizedlist>
	<listitem>
	<para><emphasis>service</emphasis> - specifies the desired service
	(msrp, sip, etc)</para>
	</listitem>
	<listitem>
	<para><emphasis>username</emphasis> - an optional user identifier for
	the service</para>
	</listitem>
	<listitem>
	<para><emphasis>ttl</emphasis> - an optional TTL request for the
	lifetime of the credentials, in seconds.</para>
	</listitem>
	</itemizedlist>
	</para>
	<example>
	<title>Request example</title>
	<programlisting format="linespecific">
GET /?service=sip&amp;username=foobar;&amp;ttl=86400;
</programlisting>
	</example>
	</section>
	<section>
	<title>Response</title>
	<para>
	The response should include the following parameters:
	<itemizedlist>
	<listitem>
	<para><emphasis>username</emphasis> - the username to use with the
	service, which is a combination of the username parameter from the
	request and a timestamp in time_t format, colon-separated. If a username
	was not included in the request this parameter will just include the
	timestamp.</para>
	</listitem>
	<listitem>
	<para><emphasis>password</emphasis> - the password to use; this value is
	computed from the secret key and the returned username value, by
	performing base64(hmac-sha1(secret key, returned username)).</para>
	</listitem>
	<listitem>
	<para><emphasis>ttl</emphasis> - the duration for which the username and
	password are valid, in seconds. This number will be less than or equal
	to the requested TTL.</para>
	</listitem>
	<listitem>
	<para><emphasis>uris</emphasis> - an array of URIs indicating servers that
	the username and password are valid for.</para>
	</listitem>
	</itemizedlist>
	</para>
	<example>
	<title>Response example</title>
	<programlisting format="linespecific">
{
  "username" : "foobar:1234567890",
  "password" : "asdfghjklauio=",
  "ttl" : 86400,
  "uris" : [
    "sip:1.2.3.4;transport=ws",
    "sip:5.6.7.8;transport=ws"
  ]
}
</programlisting>
	</example>
	</section>
	</section>
	</section>

	<section>
	<title>Dependencies</title>
	<section>
		<title>&kamailio; Modules</title>
		<para>
		The module must be loaded before this module:
		<itemizedlist>
		<listitem>
		<para><emphasis>auth</emphasis>.</para>
		</listitem>
		</itemizedlist>
		</para>
	</section>

	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries must be installed before running
		&kamailio; with this module loaded:
		<itemizedlist>
		<listitem>
		<para><emphasis>OpenSSL</emphasis>.</para>
		</listitem>
		</itemizedlist>
		</para>
	</section>
	</section>


	<section id="auth_eph.parameters">
	<title>Parameters</title>
	<section id="auth_eph.p.secret">
		<title><varname>secret</varname> (string)</title>
		<para>
		The shared secret to use for generating credentials. This
		parameter can be set multiple times - this enables the secret
		used for new credentials to be changed without causing existing
		credentials to stop working. The last secret set is the first
		that will be tried.
		</para>
		<example>
		<title><varname>secret</varname> parameter usage</title>
		<programlisting format="linespecific">
...
modparam("auth_ephemeral", "secret", "kamailio_rules")
...
</programlisting>
		</example>
	</section>
	</section>

	<section id="auth_eph.functions">
	<title>Functions</title>
	<section id="auth_eph.f.autheph_proxy">
		<title>
			<function moreinfo="none">autheph_proxy(realm)</function>
		</title>
		<para>This function performs proxy authentication.
		the rest.
		</para>
		<para>The meaning of the parameters are as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>realm</emphasis> - Realm is an opaque
			string that the user agent should present to the user so
			that he can decide what username and password to use.
			Usually this is domain of the host the server is running
			on.
			</para>
			<para>
			It must not be an empty string <quote></quote>. Apart
			from a static string, a typical value is the From-URI
			domain (i.e., $fd).
			</para>
			<para>
			The string may contain pseudo variables.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title>autheph_proxy usage</title>
		<programlisting format="linespecific">
...
if (!autheph_proxy("$fd")) {
    auth_challenge("$fd", "1");
    exit;
}
...
</programlisting>
		</example>
	</section>

	<section id="auth_eph.f.autheph_www">
		<title>
			<function moreinfo="none">autheph_www(realm[, method])</function>
		</title>
		<para>This function performs WWW digest authentication.
		</para>
		<para>The meaning of the parameters are as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>realm</emphasis> - Realm is an opaque
			string that the user agent should present to the user so
			that he can decide what username and password to use.
			Usually this is domain of the host the server is running
			on.
			</para>
			<para>
			It must not be an empty string <quote></quote>. Apart
			from a static string, a typical value is the From-URI
			domain (i.e., $fd).
			</para>
			<para>
			The string may contain pseudo variables.
			</para>
		</listitem>
		<listitem>
			<para><emphasis>method</emphasis> - the method to be
			used for authentication. This parameter is optional and
			if not set the first "word" on the request-line is used.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title>autheph_www usage</title>
		<programlisting format="linespecific">
...
if (!autheph_www("$fd")) {
    auth_challenge("$fd", "1");
    exit;
}
...
</programlisting>
		</example>
	</section>


	<section id="auth_eph.f.autheph_check">
		<title>
			<function moreinfo="none">autheph_check(realm)</function>
		</title>
		<para>This function combines the functionalities of
		<function moreinfo="none">autheph_www</function> and
		<function moreinfo="none">autheph_proxy</function>, the first
		being exectuted if the SIP request is a REGISTER, the second for
		the rest.
		</para>
		<para>The meaning of the parameters are as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>realm</emphasis> - Realm is an opaque
			string that the user agent should present to the user so
			that he can decide what username and password to use.
			Usually this is domain of the host the server is running
			on.
			</para>
			<para>
			It must not be an empty string <quote></quote>. Apart
			from a static string, a typical value is the From-URI
			domain (i.e., $fd).
			</para>
			<para>
			The string may contain pseudo variables.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title>autheph_check usage</title>
		<programlisting format="linespecific">
...
if (!autheph_check("$fd")) {
    auth_challenge("$fd", "1");
    exit;
}
...
</programlisting>
		</example>
	</section>
	</section>
</chapter>

