
Auth_ephemeral Module

Peter Dunkley

   Crocodile RCS Ltd
   <peter.dunkley@crocodile-rcs.com>

   Copyright © 2013 Crocodile RCS Ltd
     _________________________________________________________________

   Table of Contents

   1. Admin Guide

        1. Overview

              1.1. How ephemeral credentials work

                    1.1.1. Request
                    1.1.2. Response

        2. Dependencies

              2.1. Kamailio Modules
              2.2. External Libraries or Applications

        3. Parameters

              3.1. secret (string)

        4. Functions

              4.1. autheph_proxy(realm) 
              4.2. autheph_www(realm[, method]) 
              4.3. autheph_check(realm) 

   List of Examples

   1.1. Request example
   1.2. Response example
   1.3. secret parameter usage
   1.4. autheph_proxy usage
   1.5. autheph_www usage
   1.6. autheph_check usage

Chapter 1. Admin Guide

   Table of Contents

   1. Overview

        1.1. How ephemeral credentials work

              1.1.1. Request
              1.1.2. Response

   2. Dependencies

        2.1. Kamailio Modules
        2.2. External Libraries or Applications

   3. Parameters

        3.1. secret (string)

   4. Functions

        4.1. autheph_proxy(realm) 
        4.2. autheph_www(realm[, method]) 
        4.3. autheph_check(realm) 

1. Overview

   1.1. How ephemeral credentials work

        1.1.1. Request
        1.1.2. Response

   This  module  contains  all  authentication related functions that can
   work  with  ephemeral credentials. This module should be used together
   with  the  auth  module  -  it cannot be used independently because it
   depends  on  the  auth  module.  Use  this  module  if you want to use
   ephemeral credentials instead of ordinary usernames and passwords.

1.1. How ephemeral credentials work

   Ephemeral  credentials  are generated by a web-service and enforced on
   Kamailio.  This  usage of ephemeral credentials ensures that access to
   Kamailio  is controlled even if the credentials cannot be kept secret,
   as can be the case in WebRTC where the credentials may be specified in
   Javascript.

   To  use  this  mechanism,  the  only  interaction  needed  between the
   web-service and Kamailio is to share a secret key.

   Typically, credentials will be requested from the web-service using an
   HTTP  GET and provided in a JSON response. To prevent unauthorised use
   the HTTP requests can be ACLd by various means.

   This mechanism is based on the Google proposal for a "TURN Server REST
   API".

1.1.1. Request

   The request should contain the following parameters:
     * service - specifies the desired service (msrp, sip, etc)
     * username - an optional user identifier for the service
     * ttl - an optional TTL request for the lifetime of the credentials,
       in seconds.

   Example 1.1. Request example
GET /?service=sip&username=foobar;&ttl=86400;

1.1.2. Response

   The response should include the following parameters:
     * username  -  the  username  to  use  with  the service, which is a
       combination  of  the  username  parameter  from  the request and a
       timestamp in time_t format, colon-separated. If a username was not
       included  in  the  request  this  parameter  will just include the
       timestamp.
     * password  -  the  password to use; this value is computed from the
       secret   key  and  the  returned  username  value,  by  performing
       base64(hmac-sha1(secret key, returned username)).
     * ttl  - the duration for which the username and password are valid,
       in  seconds.  This  number  will  be  less  than  or  equal to the
       requested TTL.
     * uris  -  an array of URIs indicating servers that the username and
       password are valid for.

   Example 1.2. Response example
{
  "username" : "foobar:1234567890",
  "password" : "asdfghjklauio=",
  "ttl" : 86400,
  "uris" : [
    "sip:1.2.3.4;transport=ws",
    "sip:5.6.7.8;transport=ws"
  ]
}

2. Dependencies

   2.1. Kamailio Modules
   2.2. External Libraries or Applications

2.1. Kamailio Modules

   The module must be loaded before this module:
     * auth.

2.2. External Libraries or Applications

   The following libraries must be installed before running Kamailio with
   this module loaded:
     * OpenSSL.

3. Parameters

   3.1. secret (string)

3.1. secret (string)

   The  shared  secret  to use for generating credentials. This parameter
   can  be  set  multiple  times  -  this enables the secret used for new
   credentials to be changed without causing existing credentials to stop
   working. The last secret set is the first that will be tried.

   Example 1.3. secret parameter usage
...
modparam("auth_ephemeral", "secret", "kamailio_rules")
...

4. Functions

   4.1. autheph_proxy(realm) 
   4.2. autheph_www(realm[, method]) 
   4.3. autheph_check(realm) 

4.1.  autheph_proxy(realm)

   This function performs proxy authentication. the rest.

   The meaning of the parameters are as follows:
     * realm  -  Realm  is  an  opaque  string that the user agent should
       present  to  the  user  so  that  he  can decide what username and
       password  to use. Usually this is domain of the host the server is
       running on.
       It  must  not be an empty string "". Apart from a static string, a
       typical value is the From-URI domain (i.e., $fd).
       The string may contain pseudo variables.

   This function can be used from REQUEST_ROUTE.

   Example 1.4. autheph_proxy usage
...
if (!autheph_proxy("$fd")) {
    auth_challenge("$fd", "1");
    exit;
}
...

4.2.  autheph_www(realm[, method])

   This function performs WWW digest authentication.

   The meaning of the parameters are as follows:
     * realm  -  Realm  is  an  opaque  string that the user agent should
       present  to  the  user  so  that  he  can decide what username and
       password  to use. Usually this is domain of the host the server is
       running on.
       It  must  not be an empty string "". Apart from a static string, a
       typical value is the From-URI domain (i.e., $fd).
       The string may contain pseudo variables.
     * method  - the method to be used for authentication. This parameter
       is optional and if not set the first "word" on the request-line is
       used.

   This function can be used from REQUEST_ROUTE.

   Example 1.5. autheph_www usage
...
if (!autheph_www("$fd")) {
    auth_challenge("$fd", "1");
    exit;
}
...

4.3.  autheph_check(realm)

   This   function   combines  the  functionalities  of  autheph_www  and
   autheph_proxy,  the  first  being  exectuted  if  the SIP request is a
   REGISTER, the second for the rest.

   The meaning of the parameters are as follows:
     * realm  -  Realm  is  an  opaque  string that the user agent should
       present  to  the  user  so  that  he  can decide what username and
       password  to use. Usually this is domain of the host the server is
       running on.
       It  must  not be an empty string "". Apart from a static string, a
       typical value is the From-URI domain (i.e., $fd).
       The string may contain pseudo variables.

   This function can be used from REQUEST_ROUTE.

   Example 1.6. autheph_check usage
...
if (!autheph_check("$fd")) {
    auth_challenge("$fd", "1");
    exit;
}
...
